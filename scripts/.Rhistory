grep(gene_name, gene_l)
max(grep(gene_name, gene_l))
gene_l
make_gene_neighbor_list <- function(df, gene_name) {
gene_l <- df$gene
gene_l <- gene_l[is.na(gene_l)==F]
if (length(grep(gene_name, gene_l))==0){
gene_l <- vector("list", length = 21)
gene_l[1:length(gene_l)] <- NA
return(gene_l)
}
else{
gene_l <- unique(gene_l)
up <- max(grep(gene_name, gene_l)) + 10
down <- max(grep(gene_name, gene_l)) - 10
return(gene_l[down:up])
}
}
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf", gene_name = "pho")
make_gene_neighbor_list <- function(df, gene_name, delta = 10) {
# функция выбирает последний элемент с заданным геном и возвращяет списоок соседних генов
# input: df - dataframe созданный из gtf
#        gene_name
#        delta - число соседей в кажду сторону
# output: gene_l
gene_l <- df$gene
gene_l <- gene_l[is.na(gene_l)==F]
if (length(grep(gene_name, gene_l))==0){
gene_l <- vector("list", length = 21)
gene_l[1:length(gene_l)] <- NA
return(gene_l)
}
else{
gene_l <- unique(gene_l)
up <- max(grep(gene_name, gene_l)) + delta
down <- max(grep(gene_name, gene_l)) - delta
return(gene_l[down:up])
}
}
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf", gene_name = "pho")
df <- import("C:/VL_Cobetia/data/NCBI/gtf/GCF_000591415.1.gtf")
s <- "GCF_000591415.1.gtf"
gene_l <- df$gene
gene_l
df$product
product_l <- df$product
g_p_list <- mapply(list, gene_l, product_l, SIMPLIFY=F)
g_p_list
g_p_list <- as.list(paste(gene_l, product_l))
g_p_list
list(gene_l, product_l)
g_p_list <- as.list(paste(gene_l, product_l))
g_p_list
g_p_list <- as.list(paste(gene_l, product_l, sep = "|"))
g_p_list
make_gene_neighbor_list_with_products <- function(df, gene_name, delta = 10) {
# функция выбирает последний элемент с заданным геном и возвращяет списоок соседних генов
# input: df - dataframe созданный из gtf
#        gene_name
#        delta - число соседей в кажду сторону
# output: gene_l
gene_l <- df$gene
product_l <- df$product
g_p_list <- as.list(paste(gene_l, product_l, sep = "|"))
if (length(grep(gene_name, g_p_list))==0){
g_p_list <- vector("list", length = 21)
g_p_list[1:length(g_p_list)] <- NA
return(g_p_list)
}
else{
gene_l <- unique(g_p_list)
up <- max(grep(g_p_list, gene_l)) + delta
down <- max(grep(g_p_list, gene_l)) - delta
return(gene_l[down:up])
}
}
make_func <- function(path, gene_name, func = make_gene_neighbor_list_with_products){
# функция ищет аннатированные гены в окресности запрашиваемого в gtf, по всем штаммав в папке
#input:   path
#         gene_name
#output:  rez
files <- list.files(path, pattern = ".gtf", full.names=TRUE)
strain <- list.files(path, pattern = ".gtf")
rez <- data.frame(matrix(ncol = 21, nrow = 0))
i <- 1
for (f in files) {
df <- import(f)
s <- strain[i]
rez[nrow(rez) + 1,] <- c(s,func(df, gene_name))
i <- i + 1
}
return(rez)
}
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf", gene_name = "metG")
make_func <- function(path, gene_name, func = make_gene_neighbor_list){
# функция ищет аннатированные гены в окресности запрашиваемого в gtf, по всем штаммав в папке
#input:   path
#         gene_name
#output:  rez
files <- list.files(path, pattern = ".gtf", full.names=TRUE)
strain <- list.files(path, pattern = ".gtf")
rez <- data.frame(matrix(ncol = 21, nrow = 0))
i <- 1
for (f in files) {
df <- import(f)
s <- strain[i]
rez[nrow(rez) + 1,] <- c(s,func(df, gene_name))
i <- i + 1
}
return(rez)
}
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf", gene_name = "metG")
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf", gene_name = "metG", func = make_gene_neighbor_list_with_products)
df <- import("C:/VL_Cobetia/data/NCBI/gtf/GCF_000591415.1.gtf")
s <- "GCF_000591415.1.gtf"
gene_l <- df$gene
product_l <- df$product
g_p_list <- as.list(paste(gene_l, product_l, sep = "|"))
g_p_list[1]
g_p_list[2]
grep("metG", g_p_list))
grep("metG", g_p_list)
grep("metG", g_p_list)
ne_neighbor_list_with_products <- function(df, gene_name, delta = 10) {
# функция выбирает последний элемент с заданным геном и возвращяет списоок соседних генов
# input: df - dataframe созданный из gtf
#        gene_name
#        delta - число соседей в кажду сторону
# output: gene_l
gene_l <- df$gene
product_l <- df$product
g_p_list <- as.list(paste(gene_l, product_l, sep = "|"))
if (length(grep(gene_name, g_p_list))==0){
g_p_list <- vector("list", length = 21)
g_p_list[1:length(g_p_list)] <- NA
return(g_p_list)
}
else{
gene_l <- unique(g_p_list)
up <- max(grep(gene_name, g_p_list)) + delta
down <- max(grep(gene_name, g_p_li
make_gene_neighbor_list_with_products <- function(df, gene_name, delta = 10) {
make_gene_neighbor_list_with_products <- function(df, gene_name, delta = 10) {
# функция выбирает последний элемент с заданным геном и возвращяет списоок соседних генов
# input: df - dataframe созданный из gtf
#        gene_name
#        delta - число соседей в кажду сторону
# output: gene_l
gene_l <- df$gene
product_l <- df$product
g_p_list <- as.list(paste(gene_l, product_l, sep = "|"))
if (length(grep(gene_name, g_p_list))==0){
g_p_list <- vector("list", length = 21)
g_p_list[1:length(g_p_list)] <- NA
return(g_p_list)
}
else{
gene_l <- unique(g_p_list)
up <- max(grep(gene_name, g_p_list)) + delta
down <- max(grep(gene_name, g_p_list)) - delta
return(gene_l[down:up])
}
}
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf", gene_name = "metG", func = make_gene_neighbor_list_with_products)
df <- import("C:/VL_Cobetia/data/NCBI/gtf/GCF_000591415.1.gtf")
s <- "GCF_000591415.1.gtf"
gene_l <- df$gene
product_l <- df$product
g_p_list <- as.list(paste(gene_l, product_l, sep = "|"))
grep("metG", g_p_list)
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf", gene_name = "metG")
df <- import("C:/VL_Cobetia/data/NCBI/gtf/GCF_000591415.1.gtf")
s <- "GCF_000591415.1.gtf"
gene_l <- df$gene
product_l <- df$product
g_p_list <- as.list(paste(gene_l, product_l, sep = "|"))
make_gene_neighbor_list_with_products <- function(df, gene_name, delta = 10) {
# функция выбирает последний элемент с заданным геном и возвращяет списоок соседних генов
# input: df - dataframe созданный из gtf
#        gene_name
#        delta - число соседей в кажду сторону
# output: gene_l
gene_l <- df$gene
product_l <- df$product
g_p_list <- as.list(paste(gene_l, product_l, sep = "|"))
if (length(grep(gene_name, g_p_list))==0){
g_p_list <- vector("list", length = 21)
g_p_list[1:length(g_p_list)] <- NA
return(g_p_list)
}
else{
g_p_list <- unique(g_p_list)
up <- max(grep(gene_name, g_p_list)) + delta
down <- max(grep(gene_name, g_p_list)) - delta
return(gene_l[down:up])
}
}
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf", gene_name = "metG", func = make_gene_neighbor_list_with_products)
df <- import("C:/VL_Cobetia/data/NCBI/gtf/GCF_000591415.1.gtf")
s <- "GCF_000591415.1.gtf"
gene_l <- df$gene
product_l <- df$product
g_p_list <- as.list(paste(gene_l, product_l, sep = "|"))
g_p_list <- unique(g_p_list)
g_p_list
up <- max(grep(gene_name, g_p_list)) + delta
up <- max(grep(gene_name, g_p_list)) + 10
down <- max(grep(gene_name, g_p_list)) - 10
down
make_gene_neighbor_list_with_products <- function(df, gene_name, delta = 10) {
# функция выбирает последний элемент с заданным геном и возвращяет списоок соседних генов
# input: df - dataframe созданный из gtf
#        gene_name
#        delta - число соседей в кажду сторону
# output: gene_l
gene_l <- df$gene
product_l <- df$product
g_p_list <- as.list(paste(gene_l, product_l, sep = "|"))
if (length(grep(gene_name, g_p_list))==0){
g_p_list <- vector("list", length = 21)
g_p_list[1:length(g_p_list)] <- NA
return(g_p_list)
}
else{
g_p_list <- unique(g_p_list)
up <- max(grep(gene_name, g_p_list)) + delta
down <- max(grep(gene_name, g_p_list)) - delta
return(g_p_list[down:up])
}
}
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf", gene_name = "metG", func = make_gene_neighbor_list_with_products)
make_gene_neighbor_list_with_products <- function(df, gene_name, delta = 10) {
# функция выбирает последний элемент с заданным геном и возвращяет списоок соседних генов
# input: df - dataframe созданный из gtf
#        gene_name
#        delta - число соседей в кажду сторону
# output: gene_l
gene_l <- df$gene
product_l <- df$product
g_p_list <- as.list(paste(gene_l, product_l, sep = " |"))
if (length(grep(gene_name, g_p_list))==0){
g_p_list <- vector("list", length = 21)
g_p_list[1:length(g_p_list)] <- NA
return(g_p_list)
}
else{
g_p_list <- unique(g_p_list)
up <- max(grep(gene_name, g_p_list)) + delta
down <- max(grep(gene_name, g_p_list)) - delta
return(g_p_list[down:up])
}
}
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf", gene_name = "metG", func = make_gene_neighbor_list_with_products)
write.table(rez, sep="\t", file = "C:/VL_Cobetia/n_gene.tbl", row.names = F)
write.table(rez, sep="\t", file = "C:/VL_Cobetia/n_gene.tbl", row.names = F, sep = "\t")
write.table(rez, sep="\t", file = "C:/VL_Cobetia/n_gene.tbl", row.names = F)
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf", gene_name = "pho", func = make_gene_neighbor_list_with_products)
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf", gene_name = "metG", func = make_gene_neighbor_list_with_products)
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf", gene_name = "pho", func = make_gene_neighbor_list)
library(rtracklayer)
make_gene_neighbor_list_with_products <- function(df, gene_name, delta = 10) {
# функция выбирает последний элемент с заданным геном и возвращяет списоок соседних генов и продуктов
# input: df - dataframe созданный из gtf
#        gene_name
#        delta - число соседей в кажду сторону
# output: gene_l
gene_l <- df$gene
product_l <- df$product
g_p_list <- as.list(paste(gene_l, product_l, sep = " |"))
if (length(grep(gene_name, g_p_list))==0){
g_p_list <- vector("list", length = 21)
g_p_list[1:length(g_p_list)] <- NA
return(g_p_list)
}
else{
g_p_list <- unique(g_p_list)
up <- max(grep(gene_name, g_p_list)) + delta
down <- max(grep(gene_name, g_p_list)) - delta
return(g_p_list[down:up])
}
}
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf", gene_name = "pho", func = make_gene_neighbor_list_with_products())
make_func <- function(path, gene_name, func = make_gene_neighbor_list){
# функция ищет аннатированные гены в окресности запрашиваемого в gtf, по всем штаммав в папке
#input:   path
#         gene_name
#         func - function for making list
#output:  rez
files <- list.files(path, pattern = ".gtf", full.names=TRUE)
strain <- list.files(path, pattern = ".gtf")
rez <- data.frame(matrix(ncol = 21, nrow = 0))
i <- 1
for (f in files) {
df <- import(f)
s <- strain[i]
rez[nrow(rez) + 1,] <- c(s,func(df, gene_name))
i <- i + 1
}
return(rez)
}
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf", gene_name = "pho", func = make_gene_neighbor_list_with_products())
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf", gene_name = "metG", func = make_gene_neighbor_list_with_products())
make_func <- function(path, gene_name, func = make_gene_neighbor_list){
# функция ищет аннатированные гены в окресности запрашиваемого в gtf, по всем штаммав в папке
# input:   path
#          gene_name
#          func - function for making list
# output:  rez
files <- list.files(path, pattern = ".gtf", full.names=TRUE)
strain <- list.files(path, pattern = ".gtf")
rez <- data.frame(matrix(ncol = 21, nrow = 0))
i <- 1
for (f in files) {
df <- import(f)
s <- strain[i]
rez[nrow(rez) + 1,] <- c(s,func(df, gene_name))
i <- i + 1
}
return(rez)
}
make_gene_neighbor_list <- function(df, gene_name, delta = 10) {
# функция выбирает последний элемент с заданным геном и возвращяет списоок соседних генов
# input: df - dataframe созданный из gtf
#        gene_name
#        delta - число соседей в кажду сторону
# output: gene_l
gene_l <- df$gene
gene_l <- gene_l[is.na(gene_l)==F]
if (length(grep(gene_name, gene_l))==0){
gene_l <- vector("list", length = 21)
gene_l[1:length(gene_l)] <- NA
return(gene_l)
}
else{
gene_l <- unique(gene_l)
up <- max(grep(gene_name, gene_l)) + delta
down <- max(grep(gene_name, gene_l)) - delta
return(gene_l[down:up])
}
}
make_gene_neighbor_list_with_products <- function(df, gene_name, delta = 10) {
# функция выбирает последний элемент с заданным геном и возвращяет списоок соседних генов и продуктов
# input: df - dataframe созданный из gtf
#        gene_name
#        delta - число соседей в кажду сторону
# output: gene_l
gene_l <- df$gene
product_l <- df$product
g_p_list <- as.list(paste(gene_l, product_l, sep = " |"))
if (length(grep(gene_name, g_p_list))==0){
g_p_list <- vector("list", length = 21)
g_p_list[1:length(g_p_list)] <- NA
return(g_p_list)
}
else{
g_p_list <- unique(g_p_list)
up <- max(grep(gene_name, g_p_list)) + delta
down <- max(grep(gene_name, g_p_list)) - delta
return(g_p_list[down:up])
}
}
make_func <- function(path, gene_name, func = make_gene_neighbor_list){
# функция ищет аннатированные гены в окресности запрашиваемого в gtf, по всем штаммав в папке
# input:   path
#          gene_name
#          func - function for making list
# output:  rez
files <- list.files(path, pattern = ".gtf", full.names=TRUE)
strain <- list.files(path, pattern = ".gtf")
rez <- data.frame(matrix(ncol = 21, nrow = 0))
i <- 1
for (f in files) {
df <- import(f)
s <- strain[i]
rez[nrow(rez) + 1,] <- c(s,func(df, gene_name))
i <- i + 1
}
return(rez)
}
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf", gene_name = "metG", func = make_gene_neighbor_list_with_products())
make_func <- function(path, gene_name, func = make_gene_neighbor_list){
# функция ищет аннатированные гены в окресности запрашиваемого в gtf, по всем штаммав в папке
# input:   path
#          gene_name
#          func - function for making list
# output:  rez
files <- list.files(path, pattern = ".gtf", full.names=TRUE)
strain <- list.files(path, pattern = ".gtf")
rez <- data.frame(matrix(ncol = 21, nrow = 0))
i <- 1
for (f in files) {
df <- import(f)
s <- strain[i]
rez[nrow(rez) + 1,] <- c(s,func(df, gene_name))
i <- i + 1
}
return(rez)
}
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf", gene_name = "metG", func = make_gene_neighbor_list_with_products())
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf/", gene_name = "metG", func = make_gene_neighbor_list_with_products())
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf", gene_name = "metG", func = make_gene_neighbor_list_with_products())
path = "C:/VL_Cobetia/data/NCBI/gtf"
files <- list.files(path, pattern = ".gtf", full.names=TRUE)
files
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf", gene_name = "metG", func = make_gene_neighbor_list_with_products())
path = "C:/VL_Cobetia/data/NCBI/gtf"
files <- list.files(path, pattern = ".gtf", full.names=TRUE)
files
strain <- list.files(path, pattern = ".gtf")
strain
files <- list.files(path, pattern = ".gtf", full.names=TRUE)
strain <- list.files(path, pattern = ".gtf")
str(files)
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf", gene_name = "metG", func = make_gene_neighbor_list_with_products())
path = "C:/VL_Cobetia/data/NCBI/gtf"
files <- list.files(path, pattern = ".gtf", full.names=TRUE)
strain <- list.files(path, pattern = ".gtf")
str(files)
str(strain)
rez <- data.frame(matrix(ncol = 21, nrow = 0))
i <- 1
rez <- make_func(path = "C:/VL_Cobetia/data/NCBI/gtf", gene_name = "metG", func = make_gene_neighbor_list_with_products)
library(rtracklayer)
require(plyr)
require(dostats)
files <- list.files("C:/VL_Cobetia/data/NCBI/gtf", pattern = ".gtf", full.names=TRUE)
strain <- list.files("C:/VL_Cobetia/data/NCBI/gtf", pattern = ".gtf")
df  <- data.frame(import(files[1]))
df$strain <- NA
df$i <- NA
rez_df <- df[0,c("i","strain","seqnames", "start", "end", "gene_id", "transcript_id", "product", "protein_id", "gene")]
df  <- data.frame(import("C:/VL_Cobetia/data/NCBI/gtf/2.Cobetia_amphilecti_B2M13_GCF_018860945.1.gtf"))
df2 <- df[grepl("alkaline", df$product),]
View(df2)
df2$end - df2$start
df2$end
df2$start
df2$end - df2$start
files <- list.files("C:/VL_Cobetia/data/NCBI/gtf", pattern = ".gtf", full.names=TRUE)
strain <- list.files("C:/VL_Cobetia/data/NCBI/gtf", pattern = ".gtf")
df  <- data.frame(import(files[1]))
df$strain <- NA
df$i <- NA
rez_df <- df[0,c("i","strain","seqnames", "start", "end", "gene_id", "transcript_id", "product", "protein_id", "gene")]
i <- 1
for (f in files) {
df  <- data.frame(import(f))
df2 <- df[grepl("alkaline", df$product),]
if (length(df2)==0){
break
}
df3 <- df2[,c("seqnames", "start", "end", "gene_id", "transcript_id", "product", "protein_id", "gene")]
df3$strain <- strain[i]
df3$i <- i
df4 <- df$3[(df3$end - df3$start) > 20]
for (f in files) {
df  <- data.frame(import(f))
df2 <- df[grepl("alkaline", df$product),]
if (length(df2)==0){
break
}
else{
df3 <- df2[,c("seqnames", "start", "end", "gene_id", "transcript_id", "product", "protein_id", "gene")]
df3$strain <- strain[i]
df3$i <- i
df4 <- df$3[(df3$end - df3$start) > 20]
i <- 1
for (f in files) {
df  <- data.frame(import(f))
df2 <- df[grepl("alkaline", df$product),]
if (length(df2)==0){
break
}
else{
df3 <- df2[,c("seqnames", "start", "end", "gene_id", "transcript_id", "product", "protein_id", "gene")]
df3$strain <- strain[i]
df3$i <- i
df4 <- df$3[(df3$end - df3$start) > 20]
df2 <- df[grepl("alkaline", df$product),]
df2$end - df2$start
df3 <- df2[,c("seqnames", "start", "end", "gene_id", "transcript_id", "product", "protein_id", "gene")]
df3$i <- i
df4 <- df$3[(df3$end - df3$start) > 20]
df4 <- subset(df3, (df3$end - df3$start) > 20)
files <- list.files("C:/VL_Cobetia/data/NCBI/gtf", pattern = ".gtf", full.names=TRUE)
strain <- list.files("C:/VL_Cobetia/data/NCBI/gtf", pattern = ".gtf")
df  <- data.frame(import(files[1]))
df$strain <- NA
df$i <- NA
rez_df <- df[0,c("i","strain","seqnames", "start", "end", "gene_id", "transcript_id", "product", "protein_id", "gene")]
i <- 1
for (f in files) {
df  <- data.frame(import(f))
df2 <- df[grepl("alkaline", df$product),]
if (length(df2)==0){
break
}
else{
df3 <- df2[,c("seqnames", "start", "end", "gene_id", "transcript_id", "product", "protein_id", "gene")]
df3$strain <- strain[i]
df3$i <- i
df4 <- subset(df3, (df3$end - df3$start) > 20)
rez_df <- rbind(rez_df, df4)
i <- i + 1
}
}
write.csv(rez_df[,c("i","strain","seqnames", "start", "end", "gene_id", "transcript_id", "product", "protein_id", "gene")],
file = "C:/VL_Cobetia/find_product_rez.csv", row.names = F)
write.table(rez_df[,c("i","strain","seqnames", "start", "end", "gene_id", "transcript_id", "product", "protein_id", "gene")],
file = "C:/VL_Cobetia/find_product_rez.csv", row.names = F, sep = "\t")
write.table(rez_df[,c("i","strain","seqnames", "start", "end", "gene_id", "transcript_id", "product", "protein_id", "gene")],
file = "C:/VL_Cobetia/find_product_rez.tbl", row.names = F, sep = "\t")
